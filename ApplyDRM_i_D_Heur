function ApplyDRM_i_D_Heur(A_matrix, b_matrix, agentID)
% Applies H-DRM_i-D Heuristic

global M N n
global RoI powerConsume 
global initialPose initialSpeed
global rendezvousPoints

epsilon = 0.01;

normSpeed = zeros(N, 1);
for i = 1:N
    normSpeed(i) = norm(initialSpeed((n*(i-1)+1):i*n));
end

% Apply DRM-OPT Algorithm 
loop = true;
while loop
    % lambda_j = x(1:M), pi = x(M+1), mu_j = x(M+2:2*M+1)
    x = linsolve(A_matrix, b_matrix);
    loop = false;
    for i = 1:M
        if x(i) + epsilon < 0  
            A_matrix(M + 1 + i, i) = 1;
            A_matrix(M + 1 + i, M + 1 + i) = 0;
            loop = true;
            break
        end
    end
    if ~loop
        for i = 1:M
            if x(M + 1 + i) + epsilon < 0 
                A_matrix(M + 1 + i, i) = 0;
                A_matrix(M + 1 + i, M + 1 + i) = 1;
                loop = true;
                break
            end
        end
    end
end
% check feasibility 
for i = 1:M
    if x(i) + epsilon < 0 || x(M + 1 + i) + epsilon < 0 
        disp('An infeasible Ax = b system in rendezvous point solver...')
    end
end
x;

% generate rendezvous point 
sum = zeros(1, n);
for j = 1:M
    sum = sum + x(j) * RoI(j, :);
end
rendezvousPoints(agentID, :) = sum;

zCentroid = 0;
scale = 0;
for i =1:N
    zCentroid = zCentroid + powerConsume / normSpeed(i) * initialPose(i*n);
    scale = scale + powerConsume / normSpeed(i);
end
zCentroid = zCentroid / scale;

rendezvousPoints(agentID, n) = zCentroid;
end
