function FindRendezvousPoint()
% Implements H-CRM-D algorithm to solve the CRM-D problem

global N M n RoI powerConsume 
global initialPose initialSpeed
global rendezvousPoint cumul_rendezvous
global isDenied
epsilon = 0.01;
scale = 10e2;

normSpeed = zeros(N, 1);
for i = 1:N
    normSpeed(i) = norm(initialSpeed((n*(i-1)+1):i*n));
end

A_matrix = zeros(2*M+1, 2*M+1);
A_matrix(M+1, 1:M) = 1;
A_matrix(1:M, M+1) = 1;
for i = (M+2):(2*M+1)
    A_matrix(i - M - 1, i) = -1;
    A_matrix(i, i) = 1;
end
for j = 1:M
    for jj = 1:M
        sum = 0;
        for i = 1:N
            for l = 1:n
                sum = sum + 2 * powerConsume / normSpeed(i) * RoI(j,l) * RoI(jj,l) / scale;
            end
        end
        A_matrix(j, jj) = sum;
    end
end
A_matrix;
b_matrix = zeros(2*M+1, 1);
b_matrix(M+1) = 1;
b_matrix(M+2:end) = 0;
for j = 1:M
    sum = 0;
    for i = 1:N
        for l = 1:n
            sum = sum + 2 * powerConsume / normSpeed(i) * RoI(j,l) * initialPose((i-1)*n+l) / scale;
        end
    end
    b_matrix(j) = sum;
end
b_matrix;

% Apply CRM-OPT Algorithm 
loop = true;
while loop
    % lambda_j = x(1:M), pi = x(M+1), mu_j = x(M+2:2*M+1)
    x = linsolve(A_matrix, b_matrix);
    loop = false;
    for i = 1:M
        if x(i) + epsilon < 0  
            A_matrix(M + 1 + i, i) = 1;
            A_matrix(M + 1 + i, M + 1 + i) = 0;
            loop = true;
            break
        end
    end
    if ~loop
        for i = 1:M
            if x(M + 1 + i) + epsilon < 0 
                A_matrix(M + 1 + i, i) = 0;
                A_matrix(M + 1 + i, M + 1 + i) = 1;
                loop = true;
                break
            end
        end
    end
end
% check feasibility 
for i = 1:M
    if x(i) + epsilon < 0 || x(M + 1 + i) + epsilon < 0 
        disp('An infeasible Ax = b system in rendezvous point solver...')
    end
end
x;
% generate rendezvous point 
sum = zeros(1, n);
for j = 1:M
    sum = sum + x(j) * RoI(j, :);
end
rendezvousPoint = sum;

zCentroid = 0;
scale = 0;
for i =1:N
    zCentroid = zCentroid + powerConsume / normSpeed(i) * initialPose(i*n);
    scale = scale + powerConsume / normSpeed(i);
end
 zCentroid = zCentroid / scale;

rendezvousPoint(n) = zCentroid;
% offset a denied rendezvous point
if isDenied
    ApplyRendezvousOffset()
end
cumul_rendezvous = [cumul_rendezvous; rendezvousPoint];
end
